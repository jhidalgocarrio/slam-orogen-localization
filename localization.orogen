name "localization"
# Optionally declare the version number
# version "0.1"

# If new data types need to be defined, they have to be put in a separate C++
# header, and this header will be loaded here
using_library "localization" # Localization library

# If the component/deployments use data types that are defined in other oroGen
# projects, these projects should be imported there as well.
import_types_from "base"
import_types_from "localization/core/Types.hpp"

import_types_from "localizationTypes.hpp"

# Declare the State Optimization class
task_context "Dispatcher" do

    property("outputs", "std/vector</localization/OutputPortsConfiguration>").doc 'Names of the output port and the desired inputs.'

    # Dynamic input port declaration for the delta displacement inputs
    dynamic_input_port /\w+/, 'base/samples/RigidBodyState'

    # Dynamic input port declaration for the Point cloud
    dynamic_input_port /\w+/, 'base::samples::Pointcloud'

    # Dynamic input port declaration for the covariance of the Point cloud
    dynamic_input_port /\w+/, 'std::vector<base::Matrix3d>'

    # Dynamic input port declaration for the index of the Point cloud
    dynamic_input_port /\w+/, 'std::vector<unsigned int>'

    # Dynamic input port declaration for the Jacobian of the displacement with respect to the current samples, previous samples and covariance
    dynamic_input_port /\w+/, 'base/MatrixXd'

    # Dynamic output port declaration for the inputs
    dynamic_output_port /\w+/, 'localization/ExteroceptiveSample'

end

# Declare the State Optimization class
task_context "Task" do
    # This is the default from now on, and should not be removed. Rock will
    # transition to a setup where all components use a configuration step.
    needs_configuration

    #**************************
    #***** Task Properties ****
    #**************************
    property('localization_source_frame', '/std/string').doc 'From Frame for the transformer'

    property('localization_target_frame', 'string').
        doc 'Relative frame in which the pose outputs samples are wanted.'+
        'The names are relative to the task and uses the transformer names.'+
        'Use "world" for an absolute frame.'+
        'Use "navigation" for relative frame when the robot started ("navigation" is by default).'

    property("exteroceptive_inputs", "std/vector<std/string>").doc 'Names of the desired exteroceptive inputs.'

    #******************************
    #******* Input ports  *********
    #******************************

    #******* Proprioceptive sensors *********
    input_port('pose_samples', '/base/samples/RigidBodyState').
        needs_reliable_connection.
        doc 'Odometry estimated robot pose (Odometry => Statistical Motion Model + IMU orientation).'

    #******* Exteroceptive sensors *********

    # Exteroceptive update samples to correct the prediction (Visual, ICP, etc..).
    dynamic_output_port /\w+/, '/localization/ExteroceptiveSample'

    ##########################
    # Transformer
    ##########################
    transformer do
	transform "navigation", "world" # navigation to world in "Source in target" convention
	align_port("pose_samples", 0.01)
	max_latency(0.02)
    end

    #******************************
    #******* Output ports  ********
    #******************************
    output_port('pose_samples_out', '/base/samples/RigidBodyState').
	doc 'Corrected estimated robot pose.'

    output_port('state_estimation_samples_out', 'localization/StateEstimation').
	doc 'State estimation information.'

    #**********************************
    #******* Output Debug Ports *******
    #**********************************
    output_port('odo_delta_pose_samples_out', '/base/samples/RigidBodyState').
	doc 'Delta Odometry estimated robot pose (from body_frame k-1).'

    output_port('acc_delta_pose_samples_out', '/base/samples/RigidBodyState').
	doc 'Delta Accelerometers integration estimated robot pose (from body_frame k-1).'

    port_driven

end

