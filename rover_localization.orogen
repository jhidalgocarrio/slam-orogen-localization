name "rover_localization"
# Optionally declare the version number
# version "0.1"

# If new data types need to be defined, they have to be put in a separate C++
# header, and this header will be loaded here
# import_types_from "asguard_localizationType.hpp"
using_library "asguard"
using_library "rover_localization"

# If the component/deployments use data types that are defined in other oroGen
# projects, these projects should be imported there as well.
import_types_from "base"
import_types_from 'sysmon'
import_types_from "asguard"
import_types_from "torque_estimator"
import_types_from "rover_localization/DataTypes.hpp"

# Declare a new task context (i.e., a component)
#
# The corresponding C++ class can be edited in tasks/Task.hpp and
# tasks/Task.cpp, and will be put in the rover_localization namespace.
task_context "Task" do

    #******************************
    #**** Location Properties *****
    #******************************
    property('latitude', 'double', 0.926478944).
	doc 'Latitude of Bremen in radians (equivalent to 53.083333 degrees).'

    property('longitude', 'double', 0.153588974).
	doc 'Longitude of Bremen in radians (equivalent to 8.8 degrees).'

    property('altitude', 'double', 12).
	doc 'Altitude of Bremen in meters'

    property('magnetic_declination', 'double', 0.023561944).
	doc 'Bremen magnetic declination in radians (equivalent to 1.35 degrees EAST).'

    property('magnetic_declination_mode', 'int', 1).
	doc 'The declination is positive when the magnetic north is east of true north'
	doc '1 is EAST, which means positive declination. 2 is WEST, which means negative declination.'
	
    property('dip_angle', 'double', 1.187696556).
	doc 'Dip angle of Bremen in radians (equivalent to 68.05 degrees ).'    


    #*************************************
    #**** Inertial Sensor Properties *****
    #*************************************

    #**** Sensors bandwidth ****
    property('sensors_bandwidth', 'double', 16).
	doc "Inertial sensors bandwidth in Hertz. This is characteristic of the sensor and should be equal or smaller than the sampling rate."
    
    #**** For Gyroscopes ****

    property('gbiasof', '/base/Vector3d').
	doc 'bias offset in static regimen for the Gyroscopes'
    property("gyrorw", "/base/Vector3d").
	doc "angle random walk for gyroscopes (rad/sqrt(s))"
    property("gyrorrw", "/base/Vector3d").
	doc "rate random walk for gyroscopes (rad/s/sqrt(s))"

    #**** For Accelerometers ****
    
    property("abiasof", "/base/Vector3d").
	doc 'bias offset in static regimen for the Accelerometers'
    property("accrw", "/base/Vector3d").
	doc "velocity random walk for accelerometers (m/s/sqrt(s))"
    property("accrrw", "/base/Vector3d").
	doc "acceleration random walk for accelerometers (m/s^2/sqrt(s))"

    property("eccx", "/base/Vector3d").
	doc "Eccentricity (in meters) for X-axis Acc in IMU frame (with respect to the IMU reference frame)."
    property("eccy", "/base/Vector3d").
	doc "Eccentricity (in meters) for Y-axis Acc in IMU frame (with respect to the IMU reference frame)."
    property("eccz", "/base/Vector3d").
	doc "Eccentricity (in meters) for Z-axis Acc in IMU frame (with respect to the IMU reference frame)."


    #**** Magnetometers ****
    property("magrw", "/base/Vector3d").
	doc "random walk for magnetometers"

    #******************************
    #**** Filter Properties *******
    #******************************
    property('filter_frequency', 'double', 100).
	doc 'Desired frequency in Hertz to run the filter. It cannnot be bigger that the sensor values of the aggregator (trasnformer)'

    #******************************
    #******* Input ports  *********
    #******************************
    input_port('hbridge_samples', '/base/actuators/Status').
        needs_reliable_connection.
	doc 'timestamped Motorstate samples providing odometry information.'

    input_port('systemstate_samples', '/sysmon/SystemStatus').
        needs_reliable_connection.
        doc 'timestamped systemstate readings, used for the passive joint encoder'

    input_port('calibrated_sensors', '/base/samples/IMUSensors').
        doc 'provides timestamped IMUReading samples containing the calibrated sensor readings (linear acceleration and angular velocity).'

    input_port("torque_estimated", "torque_estimator/WheelTorques").
        doc("Estimated torque values")

    input_port("ground_forces_estimated", "torque_estimator/GroundForces").
        doc("Estimated ground force values")

    input_port("pose_init", "/base/samples/RigidBodyState").
        doc("Rover position and orientation information (only for initialization or debug purpose)")

    ##########################
    # Transformer
    ##########################
    transformer do
	transform "imu", "body"
	align_port("calibrated_sensors", 0.008)
	align_port("hbridge_samples", 0.001)
	align_port("systemstate_samples", 0.01)
	align_port("torque_estimated", 0.01)
	align_port("ground_forces_estimated", 0.01)
	transform "vicon", "body"
	align_port("pose_init", 0.01)
	max_latency(0.1)
    end

    #******************************
    #******* Output Ports *********
    #******************************
    output_port('pose_samples_out', '/base/samples/RigidBodyState').
	doc 'Estimated rover pose'


    #*************************************
    #******* Visualization Ports *********
    #*************************************
    output_port('bodystate_samples', '/asguard/BodyState').
	doc 'timestamped asguard bodystate information'

    # FRONT LEFT WHEEL
    output_port('C0FL2body_out', 'base/samples/RigidBodyState')
	doc 'position and orientation of foot 0 Contact point frame of Forward Left Wheel wrt the Body center'

    output_port('C1FL2body_out', 'base/samples/RigidBodyState')
	doc 'position and orientation of foot 1 Contact point frame of Forward Left Wheel wrt the Body center'

    output_port('C2FL2body_out', 'base/samples/RigidBodyState')
	doc 'position and orientation of foot 2 Contact point frame of Forward Left Wheel wrt the Body center'

    output_port('C3FL2body_out', 'base/samples/RigidBodyState')
	doc 'position and orientation of foot 3 Contact point frame of Forward Left Wheel wrt the Body center'

    output_port('C4FL2body_out', 'base/samples/RigidBodyState')
	doc 'position and orientation of foot 4 Contact point frame of Forward Right Wheel wrtthe Body center'

    # FRONT RIGHT WHEEL
    output_port('C0FR2body_out', 'base/samples/RigidBodyState')
	doc 'position and orientation of foot 0 Contact point frame of Forward Right Wheel wrt the Body center'

    output_port('C1FR2body_out', 'base/samples/RigidBodyState')
	doc 'position and orientation of foot 1 Contact point frame of Forward Right Wheel wrt the Body center'

    output_port('C2FR2body_out', 'base/samples/RigidBodyState')
	doc 'position and orientation of foot 2 Contact point frame of Forward Right Wheel wrt the Body center'

    output_port('C3FR2body_out', 'base/samples/RigidBodyState')
	doc 'position and orientation of foot 3 Contact point frame of Forward Right Wheel wrt the Body center'

    output_port('C4FR2body_out', 'base/samples/RigidBodyState')
	doc 'position and orientation of foot 4 Contact point frame of Forward Right Wheel wrtthe Body center'

    # REAR LEFT WHEEL
    output_port('C0RL2body_out', 'base/samples/RigidBodyState')
	doc 'position and orientation of foot 0 Contact point frame of Rear Left Wheel wrt the Body center'

    output_port('C1RL2body_out', 'base/samples/RigidBodyState')
	doc 'position and orientation of foot 1 Contact point frame of Rear Left Wheel wrt the Body center'

    output_port('C2RL2body_out', 'base/samples/RigidBodyState')
	doc 'position and orientation of foot 2 Contact point frame of Rear Left Wheel wrt the Body center'

    output_port('C3RL2body_out', 'base/samples/RigidBodyState')
	doc 'position and orientation of foot 3 Contact point frame of Rear Left Wheel wrt the Body center'

    output_port('C4RL2body_out', 'base/samples/RigidBodyState')
	doc 'position and orientation of foot 4 Contact point frame of Rear Right Wheel wrtthe Body center'

    # REAR RIGHT WHEEL
    output_port('C0RR2body_out', 'base/samples/RigidBodyState')
	doc 'position and orientation of foot 0 Contact point frame of Rear Right Wheel wrt the Body center'

    output_port('C1RR2body_out', 'base/samples/RigidBodyState')
	doc 'position and orientation of foot 1 Contact point frame of Rear Right Wheel wrt the Body center'

    output_port('C2RR2body_out', 'base/samples/RigidBodyState')
	doc 'position and orientation of foot 2 Contact point frame of Rear Right Wheel wrt the Body center'

    output_port('C3RR2body_out', 'base/samples/RigidBodyState')
	doc 'position and orientation of foot 3 Contact point frame of Rear Right Wheel wrt the Body center'

    output_port('C4RR2body_out', 'base/samples/RigidBodyState')
	doc 'position and orientation of foot 4 Contact point frame of Rear Right Wheel wrtthe Body center'


    #******************************
    #******* DebugOut Ports *******
    #******************************
    output_port('slip_vector', '/localization/SlipInfo').
	doc 'Timestamnped slip vector for the rover (all the wheels)'

    output_port('filter_debug', '/localization/FilterInfo').
	doc 'Timestamped filter information for debug'

    output_port('velocities_model', 'base/samples/RigidBodyState').
	doc 'Linear velocities computed by the model'

    output_port('velocities_corrected', 'base/samples/RigidBodyState').
	doc 'Corrected rover linear velocities'

    output_port('incre_velocities_imu', 'base/samples/RigidBodyState').
	doc 'Linear velocities computed by the inertial sensors'

    output_port('incre_velocities_model', 'base/samples/RigidBodyState').
	doc 'Incremental linear velocities computed by the model'

    output_port('incre_velocities_error', 'base/samples/RigidBodyState').
	doc 'Incremental velocity error in body frame'

    output_port('rbsVicon', 'base/samples/RigidBodyState').
	doc 'Pose and velocities computed by the vicon system'

    output_port('least_squares_error', 'double').
	doc 'Relative error in the least-squares computation.'

    port_driven "hbridge_samples"

end


# Declares a deployment, i.e. an actual executable that contains various tasks.
deployment "rover_localization_test" do
    # This is a test deployment that should not be installed
    do_not_install

    add_default_logger.realtime

    # Declares it as periodic, with a period of 100ms
    task("rover_localization", "Task")
end

